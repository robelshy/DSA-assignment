#include <iostream>
using namespace std;

// Ternary Search Function
int ternarySearch(int arr[], int left, int right, int key) {
    if (left <= right) {
        int mid1 = left + (right - left) / 3;
        int mid2 = right - (right - left) / 3;

        // Check if the key is at one of the mid points
        if (arr[mid1] == key) {
            return mid1;
        }
        if (arr[mid2] == key) {
            return mid2;
        }

        // If the key is smaller than mid1, search the left part
        if (key < arr[mid1]) {
            return ternarySearch(arr, left, mid1 - 1, key);
        }

        // If the key is greater than mid2, search the right part
        if (key > arr[mid2]) {
            return ternarySearch(arr, mid2 + 1, right, key);
        }

        // Otherwise, search the middle part
        return ternarySearch(arr, mid1 + 1, mid2 - 1, key);
    }
    return -1; // Key not found
}

int main() {
    int arr[] = {1, 5, 7, 10, 12, 16, 18, 20, 25, 30};
    int n = sizeof(arr) / sizeof(arr[0]);
    int key = 16;

    int result = ternarySearch(arr, 0, n - 1, key);
    if (result != -1) {
        cout << "Element " << key << " found at index " << result << endl;
    } else {
        cout << "Element " << key << " not found!" << endl;
    }
    return 0;
}
